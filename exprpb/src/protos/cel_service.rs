// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/expr/v1alpha1/cel_service.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*google/api/expr/v1alpha1/cel_service.proto\x12\x18google.api.expr.v1a\
    lpha1\x1a\x17google/api/client.proto\x1a2google/api/expr/v1alpha1/confor\
    mance_service.proto2\xd2\x02\n\nCelService\x12g\n\x05Parse\x12&.google.a\
    pi.expr.v1alpha1.ParseRequest\x1a'.google.api.expr.v1alpha1.ParseRespons\
    e\"\r\xdaA\ncel_source\x12h\n\x05Check\x12&.google.api.expr.v1alpha1.Che\
    ckRequest\x1a'.google.api.expr.v1alpha1.CheckResponse\"\x0e\xdaA\x0bpars\
    ed_expr\x12Z\n\x04Eval\x12%.google.api.expr.v1alpha1.EvalRequest\x1a&.go\
    ogle.api.expr.v1alpha1.EvalResponse\"\x03\xdaA\0\x1a\x15\xcaA\x12cel.goo\
    gleapis.comBr\n\x1ccom.google.api.expr.v1alpha1B\x0fCelServiceProtoP\x01\
    Z<google.golang.org/genproto/googleapis/api/expr/v1alpha1;expr\xf8\x01\
    \x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
