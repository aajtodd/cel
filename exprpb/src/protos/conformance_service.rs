// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/expr/v1alpha1/conformance_service.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct ParseRequest {
    // message fields
    pub cel_source: ::std::string::String,
    pub syntax_version: ::std::string::String,
    pub source_location: ::std::string::String,
    pub disable_macros: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ParseRequest {
    fn default() -> &'a ParseRequest {
        <ParseRequest as ::protobuf::Message>::default_instance()
    }
}

impl ParseRequest {
    pub fn new() -> ParseRequest {
        ::std::default::Default::default()
    }

    // string cel_source = 1;


    pub fn get_cel_source(&self) -> &str {
        &self.cel_source
    }
    pub fn clear_cel_source(&mut self) {
        self.cel_source.clear();
    }

    // Param is passed by value, moved
    pub fn set_cel_source(&mut self, v: ::std::string::String) {
        self.cel_source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cel_source(&mut self) -> &mut ::std::string::String {
        &mut self.cel_source
    }

    // Take field
    pub fn take_cel_source(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cel_source, ::std::string::String::new())
    }

    // string syntax_version = 2;


    pub fn get_syntax_version(&self) -> &str {
        &self.syntax_version
    }
    pub fn clear_syntax_version(&mut self) {
        self.syntax_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_syntax_version(&mut self, v: ::std::string::String) {
        self.syntax_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_syntax_version(&mut self) -> &mut ::std::string::String {
        &mut self.syntax_version
    }

    // Take field
    pub fn take_syntax_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.syntax_version, ::std::string::String::new())
    }

    // string source_location = 3;


    pub fn get_source_location(&self) -> &str {
        &self.source_location
    }
    pub fn clear_source_location(&mut self) {
        self.source_location.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_location(&mut self, v: ::std::string::String) {
        self.source_location = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_location(&mut self) -> &mut ::std::string::String {
        &mut self.source_location
    }

    // Take field
    pub fn take_source_location(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_location, ::std::string::String::new())
    }

    // bool disable_macros = 4;


    pub fn get_disable_macros(&self) -> bool {
        self.disable_macros
    }
    pub fn clear_disable_macros(&mut self) {
        self.disable_macros = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_macros(&mut self, v: bool) {
        self.disable_macros = v;
    }
}

impl ::protobuf::Message for ParseRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cel_source)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.syntax_version)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source_location)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_macros = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cel_source.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cel_source);
        }
        if !self.syntax_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.syntax_version);
        }
        if !self.source_location.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.source_location);
        }
        if self.disable_macros != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cel_source.is_empty() {
            os.write_string(1, &self.cel_source)?;
        }
        if !self.syntax_version.is_empty() {
            os.write_string(2, &self.syntax_version)?;
        }
        if !self.source_location.is_empty() {
            os.write_string(3, &self.source_location)?;
        }
        if self.disable_macros != false {
            os.write_bool(4, self.disable_macros)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ParseRequest {
        ParseRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cel_source",
                    |m: &ParseRequest| { &m.cel_source },
                    |m: &mut ParseRequest| { &mut m.cel_source },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "syntax_version",
                    |m: &ParseRequest| { &m.syntax_version },
                    |m: &mut ParseRequest| { &mut m.syntax_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source_location",
                    |m: &ParseRequest| { &m.source_location },
                    |m: &mut ParseRequest| { &mut m.source_location },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "disable_macros",
                    |m: &ParseRequest| { &m.disable_macros },
                    |m: &mut ParseRequest| { &mut m.disable_macros },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ParseRequest>(
                    "ParseRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ParseRequest {
        static mut instance: ::protobuf::lazy::Lazy<ParseRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ParseRequest,
        };
        unsafe {
            instance.get(ParseRequest::new)
        }
    }
}

impl ::protobuf::Clear for ParseRequest {
    fn clear(&mut self) {
        self.cel_source.clear();
        self.syntax_version.clear();
        self.source_location.clear();
        self.disable_macros = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ParseRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParseRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ParseResponse {
    // message fields
    pub parsed_expr: ::protobuf::SingularPtrField<super::syntax::ParsedExpr>,
    pub issues: ::protobuf::RepeatedField<super::status::Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ParseResponse {
    fn default() -> &'a ParseResponse {
        <ParseResponse as ::protobuf::Message>::default_instance()
    }
}

impl ParseResponse {
    pub fn new() -> ParseResponse {
        ::std::default::Default::default()
    }

    // .google.api.expr.v1alpha1.ParsedExpr parsed_expr = 1;


    pub fn get_parsed_expr(&self) -> &super::syntax::ParsedExpr {
        self.parsed_expr.as_ref().unwrap_or_else(|| super::syntax::ParsedExpr::default_instance())
    }
    pub fn clear_parsed_expr(&mut self) {
        self.parsed_expr.clear();
    }

    pub fn has_parsed_expr(&self) -> bool {
        self.parsed_expr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parsed_expr(&mut self, v: super::syntax::ParsedExpr) {
        self.parsed_expr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parsed_expr(&mut self) -> &mut super::syntax::ParsedExpr {
        if self.parsed_expr.is_none() {
            self.parsed_expr.set_default();
        }
        self.parsed_expr.as_mut().unwrap()
    }

    // Take field
    pub fn take_parsed_expr(&mut self) -> super::syntax::ParsedExpr {
        self.parsed_expr.take().unwrap_or_else(|| super::syntax::ParsedExpr::new())
    }

    // repeated .google.rpc.Status issues = 2;


    pub fn get_issues(&self) -> &[super::status::Status] {
        &self.issues
    }
    pub fn clear_issues(&mut self) {
        self.issues.clear();
    }

    // Param is passed by value, moved
    pub fn set_issues(&mut self, v: ::protobuf::RepeatedField<super::status::Status>) {
        self.issues = v;
    }

    // Mutable pointer to the field.
    pub fn mut_issues(&mut self) -> &mut ::protobuf::RepeatedField<super::status::Status> {
        &mut self.issues
    }

    // Take field
    pub fn take_issues(&mut self) -> ::protobuf::RepeatedField<super::status::Status> {
        ::std::mem::replace(&mut self.issues, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ParseResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.parsed_expr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.issues {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.parsed_expr)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.issues)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.parsed_expr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.issues {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.parsed_expr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.issues {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ParseResponse {
        ParseResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::syntax::ParsedExpr>>(
                    "parsed_expr",
                    |m: &ParseResponse| { &m.parsed_expr },
                    |m: &mut ParseResponse| { &mut m.parsed_expr },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                    "issues",
                    |m: &ParseResponse| { &m.issues },
                    |m: &mut ParseResponse| { &mut m.issues },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ParseResponse>(
                    "ParseResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ParseResponse {
        static mut instance: ::protobuf::lazy::Lazy<ParseResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ParseResponse,
        };
        unsafe {
            instance.get(ParseResponse::new)
        }
    }
}

impl ::protobuf::Clear for ParseResponse {
    fn clear(&mut self) {
        self.parsed_expr.clear();
        self.issues.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ParseResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParseResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckRequest {
    // message fields
    pub parsed_expr: ::protobuf::SingularPtrField<super::syntax::ParsedExpr>,
    pub type_env: ::protobuf::RepeatedField<super::checked::Decl>,
    pub container: ::std::string::String,
    pub no_std_env: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckRequest {
    fn default() -> &'a CheckRequest {
        <CheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl CheckRequest {
    pub fn new() -> CheckRequest {
        ::std::default::Default::default()
    }

    // .google.api.expr.v1alpha1.ParsedExpr parsed_expr = 1;


    pub fn get_parsed_expr(&self) -> &super::syntax::ParsedExpr {
        self.parsed_expr.as_ref().unwrap_or_else(|| super::syntax::ParsedExpr::default_instance())
    }
    pub fn clear_parsed_expr(&mut self) {
        self.parsed_expr.clear();
    }

    pub fn has_parsed_expr(&self) -> bool {
        self.parsed_expr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parsed_expr(&mut self, v: super::syntax::ParsedExpr) {
        self.parsed_expr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parsed_expr(&mut self) -> &mut super::syntax::ParsedExpr {
        if self.parsed_expr.is_none() {
            self.parsed_expr.set_default();
        }
        self.parsed_expr.as_mut().unwrap()
    }

    // Take field
    pub fn take_parsed_expr(&mut self) -> super::syntax::ParsedExpr {
        self.parsed_expr.take().unwrap_or_else(|| super::syntax::ParsedExpr::new())
    }

    // repeated .google.api.expr.v1alpha1.Decl type_env = 2;


    pub fn get_type_env(&self) -> &[super::checked::Decl] {
        &self.type_env
    }
    pub fn clear_type_env(&mut self) {
        self.type_env.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_env(&mut self, v: ::protobuf::RepeatedField<super::checked::Decl>) {
        self.type_env = v;
    }

    // Mutable pointer to the field.
    pub fn mut_type_env(&mut self) -> &mut ::protobuf::RepeatedField<super::checked::Decl> {
        &mut self.type_env
    }

    // Take field
    pub fn take_type_env(&mut self) -> ::protobuf::RepeatedField<super::checked::Decl> {
        ::std::mem::replace(&mut self.type_env, ::protobuf::RepeatedField::new())
    }

    // string container = 3;


    pub fn get_container(&self) -> &str {
        &self.container
    }
    pub fn clear_container(&mut self) {
        self.container.clear();
    }

    // Param is passed by value, moved
    pub fn set_container(&mut self, v: ::std::string::String) {
        self.container = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container(&mut self) -> &mut ::std::string::String {
        &mut self.container
    }

    // Take field
    pub fn take_container(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container, ::std::string::String::new())
    }

    // bool no_std_env = 4;


    pub fn get_no_std_env(&self) -> bool {
        self.no_std_env
    }
    pub fn clear_no_std_env(&mut self) {
        self.no_std_env = false;
    }

    // Param is passed by value, moved
    pub fn set_no_std_env(&mut self, v: bool) {
        self.no_std_env = v;
    }
}

impl ::protobuf::Message for CheckRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.parsed_expr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.type_env {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.parsed_expr)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.type_env)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.container)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_std_env = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.parsed_expr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.type_env {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.container.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.container);
        }
        if self.no_std_env != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.parsed_expr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.type_env {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.container.is_empty() {
            os.write_string(3, &self.container)?;
        }
        if self.no_std_env != false {
            os.write_bool(4, self.no_std_env)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckRequest {
        CheckRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::syntax::ParsedExpr>>(
                    "parsed_expr",
                    |m: &CheckRequest| { &m.parsed_expr },
                    |m: &mut CheckRequest| { &mut m.parsed_expr },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::checked::Decl>>(
                    "type_env",
                    |m: &CheckRequest| { &m.type_env },
                    |m: &mut CheckRequest| { &mut m.type_env },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "container",
                    |m: &CheckRequest| { &m.container },
                    |m: &mut CheckRequest| { &mut m.container },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "no_std_env",
                    |m: &CheckRequest| { &m.no_std_env },
                    |m: &mut CheckRequest| { &mut m.no_std_env },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CheckRequest>(
                    "CheckRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CheckRequest {
        static mut instance: ::protobuf::lazy::Lazy<CheckRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CheckRequest,
        };
        unsafe {
            instance.get(CheckRequest::new)
        }
    }
}

impl ::protobuf::Clear for CheckRequest {
    fn clear(&mut self) {
        self.parsed_expr.clear();
        self.type_env.clear();
        self.container.clear();
        self.no_std_env = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckResponse {
    // message fields
    pub checked_expr: ::protobuf::SingularPtrField<super::checked::CheckedExpr>,
    pub issues: ::protobuf::RepeatedField<super::status::Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckResponse {
    fn default() -> &'a CheckResponse {
        <CheckResponse as ::protobuf::Message>::default_instance()
    }
}

impl CheckResponse {
    pub fn new() -> CheckResponse {
        ::std::default::Default::default()
    }

    // .google.api.expr.v1alpha1.CheckedExpr checked_expr = 1;


    pub fn get_checked_expr(&self) -> &super::checked::CheckedExpr {
        self.checked_expr.as_ref().unwrap_or_else(|| super::checked::CheckedExpr::default_instance())
    }
    pub fn clear_checked_expr(&mut self) {
        self.checked_expr.clear();
    }

    pub fn has_checked_expr(&self) -> bool {
        self.checked_expr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_checked_expr(&mut self, v: super::checked::CheckedExpr) {
        self.checked_expr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_checked_expr(&mut self) -> &mut super::checked::CheckedExpr {
        if self.checked_expr.is_none() {
            self.checked_expr.set_default();
        }
        self.checked_expr.as_mut().unwrap()
    }

    // Take field
    pub fn take_checked_expr(&mut self) -> super::checked::CheckedExpr {
        self.checked_expr.take().unwrap_or_else(|| super::checked::CheckedExpr::new())
    }

    // repeated .google.rpc.Status issues = 2;


    pub fn get_issues(&self) -> &[super::status::Status] {
        &self.issues
    }
    pub fn clear_issues(&mut self) {
        self.issues.clear();
    }

    // Param is passed by value, moved
    pub fn set_issues(&mut self, v: ::protobuf::RepeatedField<super::status::Status>) {
        self.issues = v;
    }

    // Mutable pointer to the field.
    pub fn mut_issues(&mut self) -> &mut ::protobuf::RepeatedField<super::status::Status> {
        &mut self.issues
    }

    // Take field
    pub fn take_issues(&mut self) -> ::protobuf::RepeatedField<super::status::Status> {
        ::std::mem::replace(&mut self.issues, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CheckResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.checked_expr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.issues {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.checked_expr)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.issues)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.checked_expr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.issues {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.checked_expr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.issues {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckResponse {
        CheckResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::checked::CheckedExpr>>(
                    "checked_expr",
                    |m: &CheckResponse| { &m.checked_expr },
                    |m: &mut CheckResponse| { &mut m.checked_expr },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                    "issues",
                    |m: &CheckResponse| { &m.issues },
                    |m: &mut CheckResponse| { &mut m.issues },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CheckResponse>(
                    "CheckResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CheckResponse {
        static mut instance: ::protobuf::lazy::Lazy<CheckResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CheckResponse,
        };
        unsafe {
            instance.get(CheckResponse::new)
        }
    }
}

impl ::protobuf::Clear for CheckResponse {
    fn clear(&mut self) {
        self.checked_expr.clear();
        self.issues.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EvalRequest {
    // message fields
    pub bindings: ::std::collections::HashMap<::std::string::String, super::eval::ExprValue>,
    pub container: ::std::string::String,
    // message oneof groups
    pub expr_kind: ::std::option::Option<EvalRequest_oneof_expr_kind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EvalRequest {
    fn default() -> &'a EvalRequest {
        <EvalRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum EvalRequest_oneof_expr_kind {
    parsed_expr(super::syntax::ParsedExpr),
    checked_expr(super::checked::CheckedExpr),
}

impl EvalRequest {
    pub fn new() -> EvalRequest {
        ::std::default::Default::default()
    }

    // .google.api.expr.v1alpha1.ParsedExpr parsed_expr = 1;


    pub fn get_parsed_expr(&self) -> &super::syntax::ParsedExpr {
        match self.expr_kind {
            ::std::option::Option::Some(EvalRequest_oneof_expr_kind::parsed_expr(ref v)) => v,
            _ => super::syntax::ParsedExpr::default_instance(),
        }
    }
    pub fn clear_parsed_expr(&mut self) {
        self.expr_kind = ::std::option::Option::None;
    }

    pub fn has_parsed_expr(&self) -> bool {
        match self.expr_kind {
            ::std::option::Option::Some(EvalRequest_oneof_expr_kind::parsed_expr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_parsed_expr(&mut self, v: super::syntax::ParsedExpr) {
        self.expr_kind = ::std::option::Option::Some(EvalRequest_oneof_expr_kind::parsed_expr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_parsed_expr(&mut self) -> &mut super::syntax::ParsedExpr {
        if let ::std::option::Option::Some(EvalRequest_oneof_expr_kind::parsed_expr(_)) = self.expr_kind {
        } else {
            self.expr_kind = ::std::option::Option::Some(EvalRequest_oneof_expr_kind::parsed_expr(super::syntax::ParsedExpr::new()));
        }
        match self.expr_kind {
            ::std::option::Option::Some(EvalRequest_oneof_expr_kind::parsed_expr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_parsed_expr(&mut self) -> super::syntax::ParsedExpr {
        if self.has_parsed_expr() {
            match self.expr_kind.take() {
                ::std::option::Option::Some(EvalRequest_oneof_expr_kind::parsed_expr(v)) => v,
                _ => panic!(),
            }
        } else {
            super::syntax::ParsedExpr::new()
        }
    }

    // .google.api.expr.v1alpha1.CheckedExpr checked_expr = 2;


    pub fn get_checked_expr(&self) -> &super::checked::CheckedExpr {
        match self.expr_kind {
            ::std::option::Option::Some(EvalRequest_oneof_expr_kind::checked_expr(ref v)) => v,
            _ => super::checked::CheckedExpr::default_instance(),
        }
    }
    pub fn clear_checked_expr(&mut self) {
        self.expr_kind = ::std::option::Option::None;
    }

    pub fn has_checked_expr(&self) -> bool {
        match self.expr_kind {
            ::std::option::Option::Some(EvalRequest_oneof_expr_kind::checked_expr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_checked_expr(&mut self, v: super::checked::CheckedExpr) {
        self.expr_kind = ::std::option::Option::Some(EvalRequest_oneof_expr_kind::checked_expr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_checked_expr(&mut self) -> &mut super::checked::CheckedExpr {
        if let ::std::option::Option::Some(EvalRequest_oneof_expr_kind::checked_expr(_)) = self.expr_kind {
        } else {
            self.expr_kind = ::std::option::Option::Some(EvalRequest_oneof_expr_kind::checked_expr(super::checked::CheckedExpr::new()));
        }
        match self.expr_kind {
            ::std::option::Option::Some(EvalRequest_oneof_expr_kind::checked_expr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_checked_expr(&mut self) -> super::checked::CheckedExpr {
        if self.has_checked_expr() {
            match self.expr_kind.take() {
                ::std::option::Option::Some(EvalRequest_oneof_expr_kind::checked_expr(v)) => v,
                _ => panic!(),
            }
        } else {
            super::checked::CheckedExpr::new()
        }
    }

    // repeated .google.api.expr.v1alpha1.EvalRequest.BindingsEntry bindings = 3;


    pub fn get_bindings(&self) -> &::std::collections::HashMap<::std::string::String, super::eval::ExprValue> {
        &self.bindings
    }
    pub fn clear_bindings(&mut self) {
        self.bindings.clear();
    }

    // Param is passed by value, moved
    pub fn set_bindings(&mut self, v: ::std::collections::HashMap<::std::string::String, super::eval::ExprValue>) {
        self.bindings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bindings(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::eval::ExprValue> {
        &mut self.bindings
    }

    // Take field
    pub fn take_bindings(&mut self) -> ::std::collections::HashMap<::std::string::String, super::eval::ExprValue> {
        ::std::mem::replace(&mut self.bindings, ::std::collections::HashMap::new())
    }

    // string container = 4;


    pub fn get_container(&self) -> &str {
        &self.container
    }
    pub fn clear_container(&mut self) {
        self.container.clear();
    }

    // Param is passed by value, moved
    pub fn set_container(&mut self, v: ::std::string::String) {
        self.container = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container(&mut self) -> &mut ::std::string::String {
        &mut self.container
    }

    // Take field
    pub fn take_container(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EvalRequest {
    fn is_initialized(&self) -> bool {
        if let Some(EvalRequest_oneof_expr_kind::parsed_expr(ref v)) = self.expr_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EvalRequest_oneof_expr_kind::checked_expr(ref v)) = self.expr_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expr_kind = ::std::option::Option::Some(EvalRequest_oneof_expr_kind::parsed_expr(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expr_kind = ::std::option::Option::Some(EvalRequest_oneof_expr_kind::checked_expr(is.read_message()?));
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::eval::ExprValue>>(wire_type, is, &mut self.bindings)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.container)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::eval::ExprValue>>(3, &self.bindings);
        if !self.container.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.container);
        }
        if let ::std::option::Option::Some(ref v) = self.expr_kind {
            match v {
                &EvalRequest_oneof_expr_kind::parsed_expr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EvalRequest_oneof_expr_kind::checked_expr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::eval::ExprValue>>(3, &self.bindings, os)?;
        if !self.container.is_empty() {
            os.write_string(4, &self.container)?;
        }
        if let ::std::option::Option::Some(ref v) = self.expr_kind {
            match v {
                &EvalRequest_oneof_expr_kind::parsed_expr(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EvalRequest_oneof_expr_kind::checked_expr(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EvalRequest {
        EvalRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::syntax::ParsedExpr>(
                    "parsed_expr",
                    EvalRequest::has_parsed_expr,
                    EvalRequest::get_parsed_expr,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::checked::CheckedExpr>(
                    "checked_expr",
                    EvalRequest::has_checked_expr,
                    EvalRequest::get_checked_expr,
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::eval::ExprValue>>(
                    "bindings",
                    |m: &EvalRequest| { &m.bindings },
                    |m: &mut EvalRequest| { &mut m.bindings },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "container",
                    |m: &EvalRequest| { &m.container },
                    |m: &mut EvalRequest| { &mut m.container },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EvalRequest>(
                    "EvalRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EvalRequest {
        static mut instance: ::protobuf::lazy::Lazy<EvalRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EvalRequest,
        };
        unsafe {
            instance.get(EvalRequest::new)
        }
    }
}

impl ::protobuf::Clear for EvalRequest {
    fn clear(&mut self) {
        self.expr_kind = ::std::option::Option::None;
        self.expr_kind = ::std::option::Option::None;
        self.bindings.clear();
        self.container.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EvalRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvalRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EvalResponse {
    // message fields
    pub result: ::protobuf::SingularPtrField<super::eval::ExprValue>,
    pub issues: ::protobuf::RepeatedField<super::status::Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EvalResponse {
    fn default() -> &'a EvalResponse {
        <EvalResponse as ::protobuf::Message>::default_instance()
    }
}

impl EvalResponse {
    pub fn new() -> EvalResponse {
        ::std::default::Default::default()
    }

    // .google.api.expr.v1alpha1.ExprValue result = 1;


    pub fn get_result(&self) -> &super::eval::ExprValue {
        self.result.as_ref().unwrap_or_else(|| super::eval::ExprValue::default_instance())
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: super::eval::ExprValue) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut super::eval::ExprValue {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> super::eval::ExprValue {
        self.result.take().unwrap_or_else(|| super::eval::ExprValue::new())
    }

    // repeated .google.rpc.Status issues = 2;


    pub fn get_issues(&self) -> &[super::status::Status] {
        &self.issues
    }
    pub fn clear_issues(&mut self) {
        self.issues.clear();
    }

    // Param is passed by value, moved
    pub fn set_issues(&mut self, v: ::protobuf::RepeatedField<super::status::Status>) {
        self.issues = v;
    }

    // Mutable pointer to the field.
    pub fn mut_issues(&mut self) -> &mut ::protobuf::RepeatedField<super::status::Status> {
        &mut self.issues
    }

    // Take field
    pub fn take_issues(&mut self) -> ::protobuf::RepeatedField<super::status::Status> {
        ::std::mem::replace(&mut self.issues, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EvalResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.issues {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.issues)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.issues {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.issues {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EvalResponse {
        EvalResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::eval::ExprValue>>(
                    "result",
                    |m: &EvalResponse| { &m.result },
                    |m: &mut EvalResponse| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                    "issues",
                    |m: &EvalResponse| { &m.issues },
                    |m: &mut EvalResponse| { &mut m.issues },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EvalResponse>(
                    "EvalResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EvalResponse {
        static mut instance: ::protobuf::lazy::Lazy<EvalResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EvalResponse,
        };
        unsafe {
            instance.get(EvalResponse::new)
        }
    }
}

impl ::protobuf::Clear for EvalResponse {
    fn clear(&mut self) {
        self.result.clear();
        self.issues.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EvalResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvalResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IssueDetails {
    // message fields
    pub severity: IssueDetails_Severity,
    pub position: ::protobuf::SingularPtrField<super::syntax::SourcePosition>,
    pub id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IssueDetails {
    fn default() -> &'a IssueDetails {
        <IssueDetails as ::protobuf::Message>::default_instance()
    }
}

impl IssueDetails {
    pub fn new() -> IssueDetails {
        ::std::default::Default::default()
    }

    // .google.api.expr.v1alpha1.IssueDetails.Severity severity = 1;


    pub fn get_severity(&self) -> IssueDetails_Severity {
        self.severity
    }
    pub fn clear_severity(&mut self) {
        self.severity = IssueDetails_Severity::SEVERITY_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_severity(&mut self, v: IssueDetails_Severity) {
        self.severity = v;
    }

    // .google.api.expr.v1alpha1.SourcePosition position = 2;


    pub fn get_position(&self) -> &super::syntax::SourcePosition {
        self.position.as_ref().unwrap_or_else(|| super::syntax::SourcePosition::default_instance())
    }
    pub fn clear_position(&mut self) {
        self.position.clear();
    }

    pub fn has_position(&self) -> bool {
        self.position.is_some()
    }

    // Param is passed by value, moved
    pub fn set_position(&mut self, v: super::syntax::SourcePosition) {
        self.position = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_position(&mut self) -> &mut super::syntax::SourcePosition {
        if self.position.is_none() {
            self.position.set_default();
        }
        self.position.as_mut().unwrap()
    }

    // Take field
    pub fn take_position(&mut self) -> super::syntax::SourcePosition {
        self.position.take().unwrap_or_else(|| super::syntax::SourcePosition::new())
    }

    // int64 id = 3;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }
}

impl ::protobuf::Message for IssueDetails {
    fn is_initialized(&self) -> bool {
        for v in &self.position {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.severity, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.position)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.severity != IssueDetails_Severity::SEVERITY_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.severity);
        }
        if let Some(ref v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.severity != IssueDetails_Severity::SEVERITY_UNSPECIFIED {
            os.write_enum(1, self.severity.value())?;
        }
        if let Some(ref v) = self.position.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.id != 0 {
            os.write_int64(3, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IssueDetails {
        IssueDetails::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<IssueDetails_Severity>>(
                    "severity",
                    |m: &IssueDetails| { &m.severity },
                    |m: &mut IssueDetails| { &mut m.severity },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::syntax::SourcePosition>>(
                    "position",
                    |m: &IssueDetails| { &m.position },
                    |m: &mut IssueDetails| { &mut m.position },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &IssueDetails| { &m.id },
                    |m: &mut IssueDetails| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<IssueDetails>(
                    "IssueDetails",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static IssueDetails {
        static mut instance: ::protobuf::lazy::Lazy<IssueDetails> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IssueDetails,
        };
        unsafe {
            instance.get(IssueDetails::new)
        }
    }
}

impl ::protobuf::Clear for IssueDetails {
    fn clear(&mut self) {
        self.severity = IssueDetails_Severity::SEVERITY_UNSPECIFIED;
        self.position.clear();
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IssueDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IssueDetails {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum IssueDetails_Severity {
    SEVERITY_UNSPECIFIED = 0,
    DEPRECATION = 1,
    WARNING = 2,
    ERROR = 3,
}

impl ::protobuf::ProtobufEnum for IssueDetails_Severity {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IssueDetails_Severity> {
        match value {
            0 => ::std::option::Option::Some(IssueDetails_Severity::SEVERITY_UNSPECIFIED),
            1 => ::std::option::Option::Some(IssueDetails_Severity::DEPRECATION),
            2 => ::std::option::Option::Some(IssueDetails_Severity::WARNING),
            3 => ::std::option::Option::Some(IssueDetails_Severity::ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [IssueDetails_Severity] = &[
            IssueDetails_Severity::SEVERITY_UNSPECIFIED,
            IssueDetails_Severity::DEPRECATION,
            IssueDetails_Severity::WARNING,
            IssueDetails_Severity::ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("IssueDetails_Severity", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for IssueDetails_Severity {
}

impl ::std::default::Default for IssueDetails_Severity {
    fn default() -> Self {
        IssueDetails_Severity::SEVERITY_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for IssueDetails_Severity {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n2google/api/expr/v1alpha1/conformance_service.proto\x12\x18google.api.\
    expr.v1alpha1\x1a\x17google/api/client.proto\x1a&google/api/expr/v1alpha\
    1/checked.proto\x1a#google/api/expr/v1alpha1/eval.proto\x1a%google/api/e\
    xpr/v1alpha1/syntax.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x17\
    google/rpc/status.proto\"\xa9\x01\n\x0cParseRequest\x12\"\n\ncel_source\
    \x18\x01\x20\x01(\tR\tcelSourceB\x03\xe0A\x02\x12%\n\x0esyntax_version\
    \x18\x02\x20\x01(\tR\rsyntaxVersion\x12'\n\x0fsource_location\x18\x03\
    \x20\x01(\tR\x0esourceLocation\x12%\n\x0edisable_macros\x18\x04\x20\x01(\
    \x08R\rdisableMacros\"\x82\x01\n\rParseResponse\x12E\n\x0bparsed_expr\
    \x18\x01\x20\x01(\x0b2$.google.api.expr.v1alpha1.ParsedExprR\nparsedExpr\
    \x12*\n\x06issues\x18\x02\x20\x03(\x0b2\x12.google.rpc.StatusR\x06issues\
    \"\xd1\x01\n\x0cCheckRequest\x12J\n\x0bparsed_expr\x18\x01\x20\x01(\x0b2\
    $.google.api.expr.v1alpha1.ParsedExprR\nparsedExprB\x03\xe0A\x02\x129\n\
    \x08type_env\x18\x02\x20\x03(\x0b2\x1e.google.api.expr.v1alpha1.DeclR\
    \x07typeEnv\x12\x1c\n\tcontainer\x18\x03\x20\x01(\tR\tcontainer\x12\x1c\
    \n\nno_std_env\x18\x04\x20\x01(\x08R\x08noStdEnv\"\x85\x01\n\rCheckRespo\
    nse\x12H\n\x0cchecked_expr\x18\x01\x20\x01(\x0b2%.google.api.expr.v1alph\
    a1.CheckedExprR\x0bcheckedExpr\x12*\n\x06issues\x18\x02\x20\x03(\x0b2\
    \x12.google.rpc.StatusR\x06issues\"\x80\x03\n\x0bEvalRequest\x12G\n\x0bp\
    arsed_expr\x18\x01\x20\x01(\x0b2$.google.api.expr.v1alpha1.ParsedExprH\0\
    R\nparsedExpr\x12J\n\x0cchecked_expr\x18\x02\x20\x01(\x0b2%.google.api.e\
    xpr.v1alpha1.CheckedExprH\0R\x0bcheckedExpr\x12O\n\x08bindings\x18\x03\
    \x20\x03(\x0b23.google.api.expr.v1alpha1.EvalRequest.BindingsEntryR\x08b\
    indings\x12\x1c\n\tcontainer\x18\x04\x20\x01(\tR\tcontainer\x1a`\n\rBind\
    ingsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x129\n\x05value\
    \x18\x02\x20\x01(\x0b2#.google.api.expr.v1alpha1.ExprValueR\x05value:\
    \x028\x01B\x0b\n\texpr_kind\"w\n\x0cEvalResponse\x12;\n\x06result\x18\
    \x01\x20\x01(\x0b2#.google.api.expr.v1alpha1.ExprValueR\x06result\x12*\n\
    \x06issues\x18\x02\x20\x03(\x0b2\x12.google.rpc.StatusR\x06issues\"\x80\
    \x02\n\x0cIssueDetails\x12K\n\x08severity\x18\x01\x20\x01(\x0e2/.google.\
    api.expr.v1alpha1.IssueDetails.SeverityR\x08severity\x12D\n\x08position\
    \x18\x02\x20\x01(\x0b2(.google.api.expr.v1alpha1.SourcePositionR\x08posi\
    tion\x12\x0e\n\x02id\x18\x03\x20\x01(\x03R\x02id\"M\n\x08Severity\x12\
    \x18\n\x14SEVERITY_UNSPECIFIED\x10\0\x12\x0f\n\x0bDEPRECATION\x10\x01\
    \x12\x0b\n\x07WARNING\x10\x02\x12\t\n\x05ERROR\x10\x032\xd7\x02\n\x12Con\
    formanceService\x12g\n\x05Parse\x12&.google.api.expr.v1alpha1.ParseReque\
    st\x1a'.google.api.expr.v1alpha1.ParseResponse\"\r\xdaA\ncel_source\x12h\
    \n\x05Check\x12&.google.api.expr.v1alpha1.CheckRequest\x1a'.google.api.e\
    xpr.v1alpha1.CheckResponse\"\x0e\xdaA\x0bparsed_expr\x12W\n\x04Eval\x12%\
    .google.api.expr.v1alpha1.EvalRequest\x1a&.google.api.expr.v1alpha1.Eval\
    Response\"\0\x1a\x15\xcaA\x12cel.googleapis.comBz\n\x1ccom.google.api.ex\
    pr.v1alpha1B\x17ConformanceServiceProtoP\x01Z<google.golang.org/genproto\
    /googleapis/api/expr/v1alpha1;expr\xf8\x01\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
